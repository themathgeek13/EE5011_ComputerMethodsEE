#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
EE5011: Computer Methods in Electrical Engineering
\end_layout

\begin_layout Title
Spline Interpolation (Week 2)
\end_layout

\begin_layout Author
Rohan Rao, EE14B118
\end_layout

\begin_layout Section
Programming Assignment
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(x)=\frac{x^{1+J_{0}(x)}}{\sqrt{(1-x)(1+100x^{2})}}
\]

\end_inset


\end_layout

\begin_layout Subsection
Create a table of values
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def f(x):
\end_layout

\begin_layout Plain Layout

	num=pow(x,1+special.jn(0,x))
\end_layout

\begin_layout Plain Layout

	densqr=(1+100*x*x)*(1-x)
\end_layout

\begin_layout Plain Layout

	den=sqrt(densqr)
\end_layout

\begin_layout Plain Layout

	return num/den
\end_layout

\begin_layout Plain Layout

​
\end_layout

\begin_layout Plain Layout

x=arange(0.1,0.95,0.05) #generates a set of points with spacing of 0.05 in the
 range of 0.1 and 0.9
\end_layout

\begin_layout Plain Layout

y=f(x)
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plot the function
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

plot(x,y)
\end_layout

\begin_layout Plain Layout

xlabel("Location (x)")
\end_layout

\begin_layout Plain Layout

ylabel("Function value f(x)")
\end_layout

\begin_layout Plain Layout

title("Plot of the function f(x)")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename fnplot.png

\end_inset


\end_layout

\begin_layout Standard
The function is analytic in the region [0.1,0.9] since its derivative exists
 and is continuous on this interval.
 The function has one singularity when defined on the real numbers 
\begin_inset Formula $\mathbb{R}$
\end_inset

: at x=1 and two additional singularities when defined on the complex numbers
 
\begin_inset Formula $\mathbb{C}$
\end_inset

: at x=
\begin_inset Formula $\pm0.1i$
\end_inset

.
 Thus, the radius of convergence of the function is 0.1 at both x=0.1 and
 x=0.9.
\end_layout

\begin_layout Subsection
Vary N and spacing with boundary condition of y''=0
\end_layout

\begin_layout Standard
The program has been modified as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy import *
\end_layout

\begin_layout Plain Layout

from scipy import special
\end_layout

\begin_layout Plain Layout

from matplotlib.pyplot import *
\end_layout

\begin_layout Plain Layout

import weave
\end_layout

\begin_layout Plain Layout

​
\end_layout

\begin_layout Plain Layout

def func(x):
\end_layout

\begin_layout Plain Layout

	num=pow(x,1+special.jn(0,x))
\end_layout

\begin_layout Plain Layout

	densqr=(1+100*x*x)*(1-x)
\end_layout

\begin_layout Plain Layout

	den=sqrt(densqr)
\end_layout

\begin_layout Plain Layout

	return num/den
\end_layout

\begin_layout Plain Layout

​
\end_layout

\begin_layout Plain Layout

#define support code
\end_layout

\begin_layout Plain Layout

with open("spline.c","r") as f:
\end_layout

\begin_layout Plain Layout

	scode=f.read()
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

h=logspace(-4,-2,20)
\end_layout

\begin_layout Plain Layout

N=(0.8)/h
\end_layout

\begin_layout Plain Layout

print N
\end_layout

\begin_layout Plain Layout

err=zeros(h.shape)
\end_layout

\begin_layout Plain Layout

figure(0)
\end_layout

\begin_layout Plain Layout

for i in range(len(h)):
\end_layout

\begin_layout Plain Layout

	x=linspace(0.1,0.9,N[i])
\end_layout

\begin_layout Plain Layout

	y=func(x)
\end_layout

\begin_layout Plain Layout

	n=int(N[i])
\end_layout

\begin_layout Plain Layout

	xx=linspace(0.1,0.9,10*n+1)
\end_layout

\begin_layout Plain Layout

	y2=zeros(x.size)
\end_layout

\begin_layout Plain Layout

	#y2=cos(x)
\end_layout

\begin_layout Plain Layout

	u=zeros(x.size)
\end_layout

\begin_layout Plain Layout

	yy=zeros(xx.size)
\end_layout

\begin_layout Plain Layout

	code="""
\end_layout

\begin_layout Plain Layout

	#include <math.h>
\end_layout

\begin_layout Plain Layout

	int i;
\end_layout

\begin_layout Plain Layout

	double xp;
\end_layout

\begin_layout Plain Layout

	spline(x,y,n,1e40,1e40,y2,u);
\end_layout

\begin_layout Plain Layout

	for(i=0; i<=10*n; i++){
\end_layout

\begin_layout Plain Layout

		xp=xx[i];
\end_layout

\begin_layout Plain Layout

		splint(x,y,y2,n,xp,yy+i);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	"""
\end_layout

\begin_layout Plain Layout

	weave.inline(code,["x","y","n","y2","u","xx","yy"],support_code=scode,extra_comp
ile_args=["-g"],compiler="gcc")
\end_layout

\begin_layout Plain Layout

	if i==0:
\end_layout

\begin_layout Plain Layout

		figure(2)
\end_layout

\begin_layout Plain Layout

		plot(x,y)
\end_layout

\begin_layout Plain Layout

		plot(xx,yy)
\end_layout

\begin_layout Plain Layout

		title("Interpolated values and data points for n=%d" % N[i])
\end_layout

\begin_layout Plain Layout

		show()
\end_layout

\begin_layout Plain Layout

	figure(0)
\end_layout

\begin_layout Plain Layout

	z=abs(yy-func(xx))
\end_layout

\begin_layout Plain Layout

	plot(xx,z,label="N=%d"%N[i])
\end_layout

\begin_layout Plain Layout

	err[i]=z.max()
\end_layout

\begin_layout Plain Layout

​
\end_layout

\begin_layout Plain Layout

xlabel("Location (x)")
\end_layout

\begin_layout Plain Layout

ylabel("Error profile")
\end_layout

\begin_layout Plain Layout

legend(loc="upper left")
\end_layout

\begin_layout Plain Layout

figure(1)
\end_layout

\begin_layout Plain Layout

loglog(h,err)
\end_layout

\begin_layout Plain Layout

xlabel("Spacing")
\end_layout

\begin_layout Plain Layout

ylabel("Error")
\end_layout

\begin_layout Plain Layout

title("Error vs.
 spacing")
\end_layout

\begin_layout Plain Layout

show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output of the program is as follows:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename splint.png

\end_inset


\end_layout

\begin_layout Standard
The error varies linearly (log-log scale) with the spacing of points:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename q3_errsp.png

\end_inset


\end_layout

\begin_layout Standard
The error profile for various values of N is as follows:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename Errorprofile.png

\end_inset


\end_layout

\begin_layout Standard
From the above results we can conclude that the larger the number of points
 (and hence smaller the spacing between them) being evaluated, the smaller
 the error becomes.
 For obtaining an accuracy to the sixth decimal place, the error should
 be below 
\begin_inset Formula $5x10^{-7}$
\end_inset

 and from the graph above, we can see that we need a spacing of nearly 
\begin_inset Formula $10^{-4}$
\end_inset

, or N=8000.
\end_layout

\begin_layout Subsection
Implement not-a-knot and then use splint
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Analytic Evaluation of the function derivative
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(x)=\frac{x^{1+J_{0}(x)}}{\sqrt{(1-x)(1+100x^{2})}}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f_{1}(x)=x^{1+J_{0}(x)}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f_{2}(x)=\sqrt{(1-x)(1+100x^{2})}
\]

\end_inset


\end_layout

\begin_layout Standard
The two functions 
\begin_inset Formula $f_{1}(x)$
\end_inset

 and 
\begin_inset Formula $f_{2}(x)$
\end_inset

 can be differentiated separately and then the derivative of f(x) can be
 obtained using the quotient rule.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
log(f_{1}(x))=log(x).(1+J_{0}(x))
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{1}{f_{1}(x)}.\frac{df_{1}(x)}{dx}=\frac{1}{x}+\frac{J_{0}(x)}{x}+\frac{dJ_{0}(x)}{dx}.log(x)
\]

\end_inset


\end_layout

\begin_layout Standard
From the properties of Bessel functions, 
\begin_inset Formula $\frac{dJ_{0}(x)}{dx}=-J_{1}(x)$
\end_inset

.
 Thus,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{df_{1}(x)}{dx}=\frac{x^{1+J_{0}(x)}(1+J_{0}(x))}{x}-J_{1}(x).log(x).x^{1+J_{0}(x)}
\]

\end_inset


\end_layout

\begin_layout Standard
Similarly for 
\begin_inset Formula $f_{2}(x)$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{df_{2}(x)}{dx}=\frac{(200x-300x^{2}-1)}{2\sqrt{(1-x)(1+100x^{2})}}
\]

\end_inset


\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $f(x)=\frac{f_{1}(x)}{f_{2}(x)}$
\end_inset

, using quotient rule,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{df(x)}{dx}=\frac{f_{2}.df_{1}-f_{1}.df_{2}}{(f_{2})^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
And so,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f'(x)=\frac{x^{1+J_{0}(x)}\left[\frac{1+J_{0}(x)}{x}-J_{1}(x).log(x)\right]}{\sqrt{(1-x)(1+100x^{2})}}-\frac{x^{1+J_{0}(x)}(200x-300x^{2}-1)}{2\left((1-x)(1+100x^{2}\right)^{1.5}}
\]

\end_inset


\end_layout

\begin_layout Standard
Evaluating this function derivative at the points x=0.1 and x=0.9:
\end_layout

\begin_layout Standard
\begin_inset Formula $f'(x)|_{x=0.1}=0.117288$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $f'(x)|_{x=0.9}=1.71855$
\end_inset


\end_layout

\begin_layout Standard
Using this for the spline function call gives the following set of maximum
 error values for different spacings:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[  4.04399847e-11   5.15273380e-11   6.56547594e-11   8.36139491e-11
\end_layout

\begin_layout Plain Layout

   1.06426368e-10   1.35298328e-10   1.71607228e-10   2.16412332e-10
\end_layout

\begin_layout Plain Layout

   2.69893607e-10   3.27979033e-10   3.79605181e-10   3.99744626e-10
\end_layout

\begin_layout Plain Layout

   7.31053273e-10   1.62706848e-09   3.82562831e-09   9.84342896e-09
\end_layout

\begin_layout Plain Layout

   2.76302701e-08   7.59388466e-08   2.03118858e-07   5.12266858e-07]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is around 3 orders of magnitude smaller than the one that assumes a
 natural spline fit (y''=0 at the boundaries):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[  1.18177794e-08   1.91912783e-08   3.11743003e-08   5.06187381e-08
\end_layout

\begin_layout Plain Layout

   8.21990198e-08   1.33493015e-07   2.16932356e-07   3.52319880e-07
\end_layout

\begin_layout Plain Layout

   5.72755966e-07   9.29372786e-07   1.51269180e-06   2.45458206e-06
\end_layout

\begin_layout Plain Layout

   3.99519920e-06   6.50020535e-06   1.05992276e-05   1.72890126e-05
\end_layout

\begin_layout Plain Layout

   2.80538319e-05   4.59852693e-05   7.51624356e-05   1.19998543e-04]
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
100x the actual derivative for boundaries
\end_layout

\begin_layout Standard
Using 100x the function derivative at the points x=0.1 and x=0.9:
\end_layout

\begin_layout Standard
\begin_inset Formula $f'(x)|_{x=0.1}=11.7288$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $f'(x)|_{x=0.9}=171.855$
\end_inset


\end_layout

\begin_layout Standard
Output (max errors):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[ 0.002888    0.00368029  0.00469061  0.00597706  0.00761671  0.00970658
\end_layout

\begin_layout Plain Layout

  0.01237379  0.01576938  0.0201066   0.02561299  0.03267817  0.04162913
\end_layout

\begin_layout Plain Layout

  0.05311506  0.06776002  0.08654521  0.11057097  0.14092375  0.18057983
\end_layout

\begin_layout Plain Layout

  0.23117527  0.29267474]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Clearly, the errors have increased by nearly an order of 8.
 This shows that the magnitude of the derivative at the boundaries plays
 an important role in obtaining the spline fit coefficients.
 The points near the edge have the maximum error, as can be seen from the
 plot below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename 100xder.png

\end_inset


\end_layout

\begin_layout Standard
The function is of the form of a FIR filter with zeros at the points where
 the value is known, since the spline fit needs to pass through those points.
\end_layout

\end_body
\end_document
