#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
EE5011: Random Number Generation
\end_layout

\begin_layout Author
Rohan Rao, EE14B118
\end_layout

\begin_layout Section
Programming Assignment
\end_layout

\begin_layout Subsection
Implement a function to generate normally distributed numbers
\end_layout

\begin_layout Standard
The Box-Muller transform is a pseudo-random number sampling method for generatin
g pairs of independent, standard, normally distributed (0 mean, 1 variance)
 random numbers from uniformly distributed random numbers.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Z_{0}=Rcos(\theta)=\sqrt{-2lnU_{1}}cos(2\pi U_{2})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Z_{1}=Rsin(\theta)=\sqrt{-2lnU_{1}}sin(2\pi U_{2})
\]

\end_inset


\end_layout

\begin_layout Standard
Here, 
\begin_inset Formula $U_{1}$
\end_inset

 and 
\begin_inset Formula $U_{2}$
\end_inset

 are independent random variables uniformly distributed on the interval
 (0,1).
\end_layout

\begin_layout Standard
Then 
\begin_inset Formula $Z_{1}$
\end_inset

 and 
\begin_inset Formula $Z_{2}$
\end_inset

 are independent random variables with a standard normal distribution.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def normaldist():
\end_layout

\begin_layout Plain Layout

     a,b=np.random.rand(2)
\end_layout

\begin_layout Plain Layout

     c=np.sqrt(-2*np.log(a))*np.cos(2*np.pi*b)
\end_layout

\begin_layout Plain Layout

     d=np.sqrt(-2*np.log(a))*np.sin(2*np.pi*b)
\end_layout

\begin_layout Plain Layout

     return c,d
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Poisson arrival
\end_layout

\begin_layout Standard
Using the Inverse Transform Technique to obtain a random variable sampled
 from the given probability distribution, we have:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
p(t)=e^{-t}
\]

\end_inset


\end_layout

\begin_layout Standard
Thus, the CDF can be obtained as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P(t)=y=\intop_{-\infty}^{t}p(t)dt=1-e^{-t}
\]

\end_inset


\end_layout

\begin_layout Standard
This can be solved for 
\begin_inset Quotes eld
\end_inset

t
\begin_inset Quotes erd
\end_inset

 in terms of y, where y is a uniform RV and t is the desired RV.
\end_layout

\begin_layout Standard
This gives 
\begin_inset Formula $y=1-e^{-t}$
\end_inset

 or 
\begin_inset Formula $t=-ln(1-y)$
\end_inset

.
 This can then be used for obtaining random deviates from the given probability
 distribution 
\begin_inset Formula $p(t)$
\end_inset

.
 The following function can be used for getting the time for packet 30:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def p30():
\end_layout

\begin_layout Plain Layout

	t=0
\end_layout

\begin_layout Plain Layout

	for i in range(30):	
\end_layout

\begin_layout Plain Layout

		t-=np.log(np.random.rand())
\end_layout

\begin_layout Plain Layout

	return t
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This experiment can be run 100 times, and the histogram for arrival of the
 30th packet is as below:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename poisson_P30.png

\end_inset


\end_layout

\begin_layout Standard
This approximately follows a Bernoulli distribution, as expected for a Poisson
 process.
 Increasing the number of trials beyond 100 gives a more accurate representation
 of the phenomenon.
\end_layout

\begin_layout Subsection
Five functions
\end_layout

\begin_layout Subsubsection
Fitting the function f(x) using 200 points in the range [-1,1] and 15 coefficien
ts for the Chebyshev series gives the following plot:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/fx_err.png

\end_inset


\end_layout

\begin_layout Standard
The maximum error over the interval is of the order of 
\begin_inset Formula $10^{-15}.$
\end_inset


\end_layout

\begin_layout Subsubsection
Fitting the function u(x) using 200 points in the range [-1,1] and 30 coefficien
ts for the Chebyshev series:
\end_layout

\begin_layout Standard
The function 
\begin_inset Formula $u(x)=e^{-|x|}$
\end_inset

 is not easily approximated over the full interval by a single polynomial
 set.
 The use of 30 coefficients still gives an error of 
\begin_inset Formula $\sim10^{-3}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/ux_30.png

\end_inset


\end_layout

\begin_layout Standard
When considering the split intervals of [-1,0) and (0,1] we get a significantly
 better result with just 15 coefficients for [-1,0):
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/ux_15_neg.png

\end_inset


\end_layout

\begin_layout Standard
The discontinuties are due to an error of exactly zero on a semilog plot.
\end_layout

\begin_layout Standard
Similarly, for positive values of x, the 15 coefficient plot is below:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/ux_15_pos.png

\end_inset


\end_layout

\begin_layout Standard
This shows that splitting the function u(x) into two intervals and fitting
 each separately correctly removes the kink in the function at x=0 and allows
 it to be fitted properly.
\end_layout

\begin_layout Subsubsection
Fitting the function v(x) using 200 points in the range [-1,1] and 30 coefficien
ts for the Chebyshev series:
\end_layout

\begin_layout Standard
The function v(x) has a branch cut discontinuity at x=-1.1, which is outside
 the range [-1,1] but still causes the number of coefficients required to
 increase significantly.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/vx_30.png

\end_inset


\end_layout

\begin_layout Standard
The plot above shows that using 30 coefficients gives an error of the order
 of 
\begin_inset Formula $10^{-8}.$
\end_inset

 The use of 15 coefficients gives an error of the order 
\begin_inset Formula $10^{-6}.$
\end_inset


\end_layout

\begin_layout Subsubsection
Fitting the function g(x) for different values of delta and 200 points in
 range [-1,1]:
\end_layout

\begin_layout Standard
For delta=0.1, 200 points are insufficient for obtaining an error of being
 0.1 even by taking upto 50 coefficients.
\end_layout

\begin_layout Standard
For delta=1, about 15 terms are required for an error of order 
\begin_inset Formula $10^{-6}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/gx_del1.png

\end_inset


\end_layout

\begin_layout Standard
For delta=10, a significantly smaller number of terms (N=7) is required
 for very high accuracy:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/gx_del10.png

\end_inset


\end_layout

\begin_layout Standard
For delta=100, just 3 terms are necessary for such accuracy:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/gx_del100.png

\end_inset


\end_layout

\begin_layout Standard
This shows that the smoother the function becomes over the interval, the
 more easily it can be approximated by a Chebyshev fit.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/g(x01).png

\end_inset


\end_layout

\begin_layout Standard
For delta=0.1
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/g(x1).png

\end_inset


\end_layout

\begin_layout Standard
For delta=1
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/g(x10).png

\end_inset


\end_layout

\begin_layout Standard
For delta=10
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/g(x100).png

\end_inset


\end_layout

\begin_layout Standard
For delta=100
\end_layout

\begin_layout Subsubsection
Fitting the function h(x) for different values of delta and 200 points in
 range [-1,1]:
\end_layout

\begin_layout Standard
For delta=1, with 20 coefficients:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/h(x1).png

\end_inset


\end_layout

\begin_layout Standard
For delta=10, with 15 coefficients:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/h(x10).png

\end_inset


\end_layout

\begin_layout Standard
For delta=100, with 10 coefficients:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/h(x1000.png

\end_inset


\end_layout

\begin_layout Standard
Plotting h(x) for different values of delta shows that small values of delta
 force the function to have sharp kinks at the edges of the interval, thus
 requiring significantly more coefficients for the Chebyshev series to converge.
\end_layout

\begin_layout Subsection
Fourier function fitting
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy.integrate import quad
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def f1(x,m):
\end_layout

\begin_layout Plain Layout

	return f(x)*cos(m*(x+1)*np.pi/2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def fouriercoeffs(f1,N):
\end_layout

\begin_layout Plain Layout

     ...:     fcoeff=[]
\end_layout

\begin_layout Plain Layout

     ...:     for i in range(N):
\end_layout

\begin_layout Plain Layout

     ...:         fcoeff.append(quad(f1,-1,1,args=(i))[0])
\end_layout

\begin_layout Plain Layout

     ...:     return np.array(fcoeff)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Plots of fouriercoeffs for N=100 are as follows:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/hx_fourier.png

\end_inset


\end_layout

\begin_layout Standard
Clearly, since h(x) is periodic, it is able to be approximated well by a
 Fourier fit.
 The value of delta influences how quickly the series converges, with larger
 delta converging more quickly than small delta.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/gx_fourier.png

\end_inset


\end_layout

\begin_layout Standard
g(x) does not converge quickly, having well over 100 coefficients for various
 values of delta.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/vx_fourier.png

\end_inset


\end_layout

\begin_layout Standard
The magnitude of the coefficients of v(x) drop exponentially, but still
 are of the order of 
\begin_inset Formula $10^{-4}$
\end_inset

 at N=100.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/fx_fourier.png

\end_inset


\end_layout

\begin_layout Standard
The coefficients of f(x) also drop in magnitude similar to v(x).
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename ../week5,6_ChebyshevFit&UnstableSeriesSum/ux_fourier.png

\end_inset


\end_layout

\begin_layout Standard
The coefficients of u(x) also don't quickly decay with N.
\end_layout

\end_body
\end_document
