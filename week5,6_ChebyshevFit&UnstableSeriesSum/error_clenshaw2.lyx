#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
EE5011: Error Analysis and Clenshaw Algorithm
\end_layout

\begin_layout Author
Rohan Rao, EE14B118
\end_layout

\begin_layout Section
Programming Assignment (Summing Series)
\end_layout

\begin_layout Subsection
Aitken's 
\begin_inset Formula $\delta^{2}-process$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
I_{n}(x)=J_{n}(jx)=\sum_{k=0}^{\infty}\frac{(-1)^{k}(jx/2)^{n+2k}}{k!(n+k)!}=\left(\frac{jx}{2}\right)^{n}\sum_{k=0}^{\infty}\frac{(x^{2}/4)^{k}}{k!(k+n)!}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def kterm(x,k,n):      
\end_layout

\begin_layout Plain Layout

	...:     return (x**2/4.0)**k/(fact(k)*fact(k+n)) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def sumn(x,n):  
\end_layout

\begin_layout Plain Layout

     ...:     err=[]                 
\end_layout

\begin_layout Plain Layout

     ...:     s=kterm(x,0,n)*(1j*x/2)**n
\end_layout

\begin_layout Plain Layout

     ...:     for k in range(1,1000):
\end_layout

\begin_layout Plain Layout

     ...:         a=kterm(x,k,n)*(1j*x/2)**n         
\end_layout

\begin_layout Plain Layout

     ...:         err.append(a-kterm(x,k-1,n)*(1j*x/2)**n)
\end_layout

\begin_layout Plain Layout

     ...:         if abs(err[-1])<1e-15:                               
\end_layout

\begin_layout Plain Layout

     ...:             break     
\end_layout

\begin_layout Plain Layout

     ...:         s+=a                              
\end_layout

\begin_layout Plain Layout

     ...:     return s,k+1,np.array(err)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def calcAxn(x2,x1,x0):
\end_layout

\begin_layout Plain Layout

     ...:     return x2-((x2-x1)**2/((x2-x1)-(x1-x0)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def aitken(x,n): 
\end_layout

\begin_layout Plain Layout

     ...:     ax=[]; psum=[]; err=[]                 
\end_layout

\begin_layout Plain Layout

     ...:     psum.append(part(x,0,n)) 
\end_layout

\begin_layout Plain Layout

     ...:     for k in range(1,100): 
\end_layout

\begin_layout Plain Layout

     ...:         psum.append(psum[-1]+part(x,k,n))
\end_layout

\begin_layout Plain Layout

     ...:         if(len(psum)>=3):                      
\end_layout

\begin_layout Plain Layout

     ...:             ax.append(calcAxn(psum[-1],psum[-2],psum[-3]))
\end_layout

\begin_layout Plain Layout

     ...:         if(len(ax)>2):
\end_layout

\begin_layout Plain Layout

     ...:             err.append(abs(ax[-1]-ax[-2]))
\end_layout

\begin_layout Plain Layout

     ...:             if err[-1]<1e-15: 
\end_layout

\begin_layout Plain Layout

     ...:                 break
\end_layout

\begin_layout Plain Layout

     ...:             
\end_layout

\begin_layout Plain Layout

     ...:     return np.array(err)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, kterm defines the term after the summation symbol in the final formula
 on the RHS.
 This is used directly in the sumn function to evaluate the sum until the
 errror is below a tolerance (chosen at random) to be 
\begin_inset Formula $10^{-15}.$
\end_inset

 The calcAxn function uses the Aitken 
\begin_inset Formula $\delta^{2}$
\end_inset

 method by considering three partial sum terms at a time to obtain an accelerate
d convergence.
 The plot of the convergence of error of the above two methods is as shown
 below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_1.png

\end_inset


\end_layout

\begin_layout Standard
The curve on top is that of the direct summation, whereas the curve below
 it is the result of the Aitken method.
 This graph was evaluated for the value of x=6.1 and n=20.
 This gives a value of 
\begin_inset Formula $3.092897418*10^{-9}$
\end_inset

.
 The value was compared with the one obtained from scipy.special.jn and is
 accurate.
\end_layout

\begin_layout Section
Euler's transformation
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\sum_{n=1}^{\infty}(-1)^{n}\frac{x^{n}}{n}=-ln(1+x)
\]

\end_inset


\end_layout

\begin_layout Standard
Euler's transformation is intended to be applied to an alternating series,
 as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\sum_{n=0}^{\infty}(-1)^{n}a_{n}=\sum_{n=0}^{\infty}(-1)^{n}\frac{\varDelta^{n}a_{0}}{2^{n+1}}
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\varDelta$
\end_inset

 is the forward difference operator:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\varDelta^{n}a_{0}=\sum_{k=0}^{n}(-1)^{k}\left(_{k}^{n}\right)a_{n-k}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def xterm(x,n):       
\end_layout

\begin_layout Plain Layout

     ...:     return (-x)**n/n
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above function returns the n-th term of the series to be summed.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 def neglnx(y):        
\end_layout

\begin_layout Plain Layout

     ...:     s=xterm(y,1);i=2
\end_layout

\begin_layout Plain Layout

     ...:     val=xterm(y,1)
\end_layout

\begin_layout Plain Layout

     ...:     while i<1e10:
\end_layout

\begin_layout Plain Layout

     ...:         if abs(val-xterm(y,i))<1e-15:
\end_layout

\begin_layout Plain Layout

     ...:             break
\end_layout

\begin_layout Plain Layout

     ...:         val=xterm(y,i)
\end_layout

\begin_layout Plain Layout

     ...:         s+=val
\end_layout

\begin_layout Plain Layout

     ...:         i+=1
\end_layout

\begin_layout Plain Layout

     ...:     return s,i
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function directly sums the series upto a tolerance of 
\begin_inset Formula $10^{-15}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def fwdiff(x,n):
\end_layout

\begin_layout Plain Layout

     ...:     s=0            
\end_layout

\begin_layout Plain Layout

     ...:     for k in range(n):
\end_layout

\begin_layout Plain Layout

     ...:        s+=(-1)**k*an(x,n-k)*scipy.misc.comb(n,k)/2**(n+1)
\end_layout

\begin_layout Plain Layout

     ...:     return s 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the forward difference function as defined above, but modified to
 exclude k=n, since that would result in a divide-by-zero operation due
 to the nature of 
\begin_inset Formula $a_{n}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def Euler(x):   
\end_layout

\begin_layout Plain Layout

     ...:     s=fwdiff(x,0)/2
\end_layout

\begin_layout Plain Layout

     ...:     val=s             
\end_layout

\begin_layout Plain Layout

     ...:     for i in range(1,100000):                            
\end_layout

\begin_layout Plain Layout

     ...:         val2=(-1)**i*fwdiff(x,i)
\end_layout

\begin_layout Plain Layout

     ...:         if(abs(val2-val)<1e-15):
\end_layout

\begin_layout Plain Layout

     ...:             break
\end_layout

\begin_layout Plain Layout

     ...:         s+=val
\end_layout

\begin_layout Plain Layout

     ...:         val=val2
\end_layout

\begin_layout Plain Layout

     ...:     return s,i+1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, this function sums the Euler transformed series, as defined above,
 to a tolerance of 
\begin_inset Formula $10^{-15}$
\end_inset

.
 The plots are as shown below:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_2-1.png

\end_inset


\end_layout

\begin_layout Standard
It can be seen that the direct summing method dominates up until x=0.5, after
 which the Euler transformation is significantly better than the direct
 summation method.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_2-2.png

\end_inset


\end_layout

\begin_layout Standard
For x<0, it can be seen that the direct summation method is better than
 the Euler transformation method.
\end_layout

\begin_layout Section
Quadratic Equation
\end_layout

\begin_layout Standard
In general, the error increases with the increase in magnitude of alpha.
 The plots are shown below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename N11plot.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename N31plot.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename N51plot.png

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
Stable and unstable series
\end_layout

\begin_layout Standard
The series to be summed is as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
S(x)=\sum_{n=0}^{40}\frac{1}{n+1}J_{n}(x)
\]

\end_inset


\end_layout

\begin_layout Standard
The function 
\begin_inset Formula $J_{n}(x)$
\end_inset

 is the 
\begin_inset Formula $n^{th}$
\end_inset

 term of the Bessel series.
\end_layout

\begin_layout Standard
A Python function to compute the sum (exact solution) is as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy.special import jn
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def S(x,num):
\end_layout

\begin_layout Plain Layout

	total=0
\end_layout

\begin_layout Plain Layout

	for i in range(num+1):
\end_layout

\begin_layout Plain Layout

		total+=jn(i,x)/(i+1)
\end_layout

\begin_layout Plain Layout

	return total
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This gives the exact value of S(1.5,40) = 0.88608893929096932 and S(15,40)
 = 0.12377300077343459.
\end_layout

\begin_layout Standard
The recursion formula for the Bessel-like functions is as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Z_{n}(x)=\frac{2(n-1)}{x}Z_{n-1}(x)-Z_{n-2}(x)
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $Z_{n}(x)$
\end_inset

 is either 
\begin_inset Formula $J_{n}(x)$
\end_inset

 or 
\begin_inset Formula $Y_{n}(x)$
\end_inset

 or a linear combination of the two.
\end_layout

\begin_layout Standard
For computing the series using a forward recursion, we can use the initial
 condition of 
\begin_inset Formula $J_{-1}(x)=0$
\end_inset

 and 
\begin_inset Formula $J_{0}(x)$
\end_inset

 obtained from scipy.special.jn.
 Then we can use these in a loop with dynamic programming to obtain the
 two sequences for x=1.5 and x=15.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

vals1p5=[0,jn(0,1.5)]
\end_layout

\begin_layout Plain Layout

for i in range(50):
\end_layout

\begin_layout Plain Layout

	vals1p5.append(vals1p5[-1]*2*i/1.5-vals1p5[-2])
\end_layout

\begin_layout Plain Layout

del vals1p5[0]
\end_layout

\begin_layout Plain Layout

vals15=[0,jn(0,15)]
\end_layout

\begin_layout Plain Layout

for i in range(50):
\end_layout

\begin_layout Plain Layout

	vals15.append(vals15[-1]*2*i/15-vals15[-2])
\end_layout

\begin_layout Plain Layout

del vals15[0]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above two sequences obtained from forward recursion can be used to calculate
 the sum of the above series, with the error being checked at every stage.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

n=np.array(range(41))
\end_layout

\begin_layout Plain Layout

fwd15=abs(np.cumsum(vals15/(n+1)))
\end_layout

\begin_layout Plain Layout

fwd1p5=abs(np.cumsum(vals1p5/(n+1)))
\end_layout

\begin_layout Plain Layout

err1p5=s1(1.5,n)-fwd1p5[:41]
\end_layout

\begin_layout Plain Layout

err15=s1(15,n)-fwd15[:41]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The plots obtained are as follows:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename xval1p5.png

\end_inset


\end_layout

\begin_layout Standard
Error grows exponentially (semilog scale) for n ~ 3.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename xval15.png

\end_inset


\end_layout

\begin_layout Standard
Error grows exponentially beyond n ~ 18.
\end_layout

\begin_layout Standard
This shows that the series is unstable for forward recursion when n > x.
 The different values of x=1.5 and x=15 show the variation in the error plot
 as above.
\end_layout

\begin_layout Standard
Using the following recursion for reversed calculation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Z_{n}(x)=\frac{2(n+1)}{x}Z_{n+1}(x)-Z_{n+2}(x)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

vals1p5=[0,1] #J61, J60
\end_layout

\begin_layout Plain Layout

for i in range(60):
\end_layout

\begin_layout Plain Layout

	vals1p5.append(2*(60-i)*vals1p5[-1]/1.5-vals1p5[-2])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

vals15=[0,1]
\end_layout

\begin_layout Plain Layout

for i in range(60):
\end_layout

\begin_layout Plain Layout

	vals15.append(2*(60-i)*vals15[-1]/15.0-vals15[-2])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#NORMALIZE
\end_layout

\begin_layout Plain Layout

vals15=np.array(vals15)
\end_layout

\begin_layout Plain Layout

vals15/=vals15[-1]
\end_layout

\begin_layout Plain Layout

vals1p5=np.array(vals1p5)
\end_layout

\begin_layout Plain Layout

vals1p5/=vals1p5[-1]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Reverse
\end_layout

\begin_layout Plain Layout

vals1p5=vals1p5[::-1][:41]
\end_layout

\begin_layout Plain Layout

vals15=vals15[::-1][:41]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

n=np.array(range(41))
\end_layout

\begin_layout Plain Layout

fwd15=abs(np.cumsum(vals15/(n+1)))
\end_layout

\begin_layout Plain Layout

fwd1p5=abs(np.cumsum(vals1p5/(n+1)))
\end_layout

\begin_layout Plain Layout

err1p5=s1(1.5,n)-fwd1p5[:41]
\end_layout

\begin_layout Plain Layout

err15=s1(15,n)-fwd15[:41]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The plots obtained are as follows:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename err1p5_rev.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename err15_rev.png

\end_inset


\end_layout

\begin_layout Standard
This shows that using the reverse recursion for obtaining the series sum
 can significantly reduce the error, and keep the series stable.
\end_layout

\begin_layout Subsection
Clenshaw Algorithm
\end_layout

\begin_layout Standard
The Clenshaw algorithm implemented in Python, is as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Clenshaw Algorithm:
\end_layout

\begin_layout Plain Layout

#S(x)=sum(0 to n, c_k*F_k(x))
\end_layout

\begin_layout Plain Layout

#F_(n+1)(x)=alpha(n,x)*F_n(x)+beta(n,x)*F_(n-1)(x)
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import scipy.special
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def alpha(i,x):
\end_layout

\begin_layout Plain Layout

    #return x/(2*(i+1))
\end_layout

\begin_layout Plain Layout

    return 2*x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def beta(i,x):
\end_layout

\begin_layout Plain Layout

    #return x**2/(2*(i+1)*i)
\end_layout

\begin_layout Plain Layout

    return -1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def F(i,x):
\end_layout

\begin_layout Plain Layout

    if(i==0):
\end_layout

\begin_layout Plain Layout

        return 1
\end_layout

\begin_layout Plain Layout

    if(i==1):
\end_layout

\begin_layout Plain Layout

        return x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def a(i):
\end_layout

\begin_layout Plain Layout

    return coeff[i]
\end_layout

\begin_layout Plain Layout

    #return 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def S(F,alpha,beta,a,x,n):
\end_layout

\begin_layout Plain Layout

    b=np.zeros(n+3)
\end_layout

\begin_layout Plain Layout

    b[-1]=b[-2]=0
\end_layout

\begin_layout Plain Layout

    for i in range(n,0,-1):
\end_layout

\begin_layout Plain Layout

        b[i]=a(i)+alpha(i,x)*b[i+1]+beta(i+1,x)*b[i+2]
\end_layout

\begin_layout Plain Layout

    return F(0,x)*a(0)+F(1,x)*b[1]+beta(1,x)*F(0,x)*b[2]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using the Chebyshev sum for 
\begin_inset Formula $e^{x}$
\end_inset

 requires the Chebyshev coefficients, which can be calculated using the
 procedure below:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def chebfit(xdata,ydata,x):
\end_layout

\begin_layout Plain Layout

     ...:     n=len(xdata)
\end_layout

\begin_layout Plain Layout

     ...:     xmax=max(xdata)
\end_layout

\begin_layout Plain Layout

     ...:     xmin=min(xdata)
\end_layout

\begin_layout Plain Layout

     ...:     xdata=(2*xdata-xmax-xmin)/(xmax-xmin)
\end_layout

\begin_layout Plain Layout

     ...:     T=np.zeros((n,n))
\end_layout

\begin_layout Plain Layout

     ...:     T[:,0]=1
\end_layout

\begin_layout Plain Layout

     ...:     T[:,1]=xdata
\end_layout

\begin_layout Plain Layout

     ...:     for j in range(2,n):
\end_layout

\begin_layout Plain Layout

     ...:         T[:,j]=2*xdata*T[:,j-1]-T[:,j-2]
\end_layout

\begin_layout Plain Layout

     ...:     b=np.dot(np.linalg.inv(T),ydata)
\end_layout

\begin_layout Plain Layout

     ...:     x=(2*x-xmax-xmin)/(xmax-xmin)
\end_layout

\begin_layout Plain Layout

     ...:     y=np.zeros(len(x))
\end_layout

\begin_layout Plain Layout

     ...:     for j in range(n):
\end_layout

\begin_layout Plain Layout

     ...:         y=y+b[j]*cos((j-1)*arccos(x));
\end_layout

\begin_layout Plain Layout

     ...:     return y,b
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This can also be computed using the np.polynomial.chebyshev.chebfit function
 in Numpy.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

coeff=np.polynomial.chebyshev.chebfit(x,y,20)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The coefficients can then be used to obtain the function by using the Chebyshev
 recursive formula:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def chebpoly(n,x):
\end_layout

\begin_layout Plain Layout

     ...:     if(n==0):         
\end_layout

\begin_layout Plain Layout

     ...:         return 1      
\end_layout

\begin_layout Plain Layout

     ...:     if(n==1):         
\end_layout

\begin_layout Plain Layout

     ...:         return x
\end_layout

\begin_layout Plain Layout

     ...:     return 2*x*chebpoly(n-1,x)-chebpoly(n-2,x)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def chebapproxfn(coeff,x):
\end_layout

\begin_layout Plain Layout

     ...:     n=len(coeff)      
\end_layout

\begin_layout Plain Layout

     ...:     s=0               
\end_layout

\begin_layout Plain Layout

     ...:     for i in range(n):
\end_layout

\begin_layout Plain Layout

     ...:         s+=coeff[i]*chebpoly(i,x)
\end_layout

\begin_layout Plain Layout

     ...:     return s
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The error obtained using this direct method is of the order of 
\begin_inset Formula $10^{-14}.$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename epowx.png

\end_inset


\end_layout

\begin_layout Standard
Upon using the Clenshaw algorithm, the following plot is obtained.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename clenshaw.png

\end_inset


\end_layout

\begin_layout Standard
The spaces are where the error is zero, so log(error) is not defined.
\end_layout

\begin_layout Standard
This shows that the Clenshaw algorithm gives an error that is better than
 the direct sum obtained from above.
\end_layout

\begin_layout Standard
The mean and standard deviation of the plots above is as follows:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Direct Sum:
\end_layout

\begin_layout Plain Layout

mean = 3.835e-15
\end_layout

\begin_layout Plain Layout

std = 1.044e-14
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Clenshaw Sum:
\end_layout

\begin_layout Plain Layout

mean = 1.141e-15
\end_layout

\begin_layout Plain Layout

std = 8.393e-16
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Clearly, the Clenshaw sum has a 3 times lower mean and an order of magnitude
 better standard deviation.
 In the case of the series S(x), it doesn't matter for the Clenshaw algorithm
 whether it is stable in forward or backward direction.
 So I will use the forward series to ensure it works.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Z_{n+1}(x)=\frac{2n}{x}Z_{n}(x)-Z_{n-1}(x)
\]

\end_inset


\end_layout

\begin_layout Standard
When I tried the same Clenshaw algorithm for this series, it was giving
 the wrong answer, and I think something is wrong.
\end_layout

\end_body
\end_document
