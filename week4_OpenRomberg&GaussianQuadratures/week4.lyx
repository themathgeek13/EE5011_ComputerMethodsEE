#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
EE5011: Computer Methods in Electrical Engineering
\end_layout

\begin_layout Title
Numerical Integration of Singular Integrals (Week 5)
\end_layout

\begin_layout Author
Rohan Rao, EE14B118
\end_layout

\begin_layout Section
Programming Assignment - Singular Integrals
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
J=\intop_{1}^{3}\frac{e^{-x}}{J_{1}\left(\sqrt{-x^{2}+4x-3}\right)}dx
\]

\end_inset


\end_layout

\begin_layout Subsection
Graph the integrand in Python from x=1 to x=3
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from scipy.special import jv
\end_layout

\begin_layout Plain Layout

from pylab import *
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def integrand(x):
\end_layout

\begin_layout Plain Layout

    return np.exp(-x)/jv(1,np.sqrt(-x**2+4*x-3))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#>>>>>>>Singular Integrals
\end_layout

\begin_layout Plain Layout

#q1.
 Graphing the Integrand
\end_layout

\begin_layout Plain Layout

eps=1e-6
\end_layout

\begin_layout Plain Layout

x=linspace(1+eps,3-eps,1000)
\end_layout

\begin_layout Plain Layout

semilogy(x,integrand(x),'ro')
\end_layout

\begin_layout Plain Layout

semilogy(x,integrand(x))
\end_layout

\begin_layout Plain Layout

title(r'Graph of the integrand $e^{-x}/J1(
\backslash
sqrt{-x^2+4x-3})$ from $x=1$ to $x=3$')
\end_layout

\begin_layout Plain Layout

xlabel("value of x")
\end_layout

\begin_layout Plain Layout

ylabel("value of f(x)")
\end_layout

\begin_layout Plain Layout

show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_1.png

\end_inset


\end_layout

\begin_layout Standard
The semilog plot above is obtained, showing the singularities at x=1 and
 x=3.
\end_layout

\begin_layout Subsection
Integrate using scipy.quad
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#q2.
 Using quad for evaluating the function
\end_layout

\begin_layout Plain Layout

from scipy import integrate
\end_layout

\begin_layout Plain Layout

print integrate.quad(integrand,1,3)
\end_layout

\begin_layout Plain Layout

#OUTPUT: (1.140489938554265, 5.333975483523545e-10)
\end_layout

\begin_layout Plain Layout

# n_evals: 567
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Use Open Romberg to integrate and study the convergence
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#q3.
 Using open Romberg for integration
\end_layout

\begin_layout Plain Layout

import sing_intg as si
\end_layout

\begin_layout Plain Layout

print si.qromo(integrand,1,3,eps=1e-5)
\end_layout

\begin_layout Plain Layout

#requires 81 function calls
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

print si.qromo(integrand,1,3,eps=1e-6)
\end_layout

\begin_layout Plain Layout

#requires 2187 function calls
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

print si.qromo(integrand,1,3,eps=1e-7)
\end_layout

\begin_layout Plain Layout

#requires 531441 function calls
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It can be seen that the number of function calls increases exponentially
 with decreasing order of magnitude of the required tolerance.
\end_layout

\begin_layout Section
Programming Assignment - Gaussian Quadratures
\end_layout

\begin_layout Subsection
Transform integral to (-1,1)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#q1.
 transform to -1 to 1.
\end_layout

\begin_layout Plain Layout

# Let t = x-2
\end_layout

\begin_layout Plain Layout

def f(t):
\end_layout

\begin_layout Plain Layout

    return np.exp(-t-2)*np.sqrt(1-t*t)/jv(1,sqrt(1-t**2))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature
\end_layout

\begin_layout Plain Layout

#integral from -1 to 1 f(x)dx/sqrt(1-x^2)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Setting t=x-2 converts the limits to -1,1.
\end_layout

\begin_layout Subsection
Evaluate using Gauss-Chebyshev quadratures
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#q2.
 Gauss-Chebyshev Quadrature
\end_layout

\begin_layout Plain Layout

def calcGQ(x,w):
\end_layout

\begin_layout Plain Layout

    sum=0.0
\end_layout

\begin_layout Plain Layout

    for i in range(len(x)):
\end_layout

\begin_layout Plain Layout

        sum+=f(x[i])*w[i]
\end_layout

\begin_layout Plain Layout

    return sum
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x=np.array(range(20))
\end_layout

\begin_layout Plain Layout

x=cos(np.pi*(x-0.5)/20)
\end_layout

\begin_layout Plain Layout

print x
\end_layout

\begin_layout Plain Layout

w=np.full(20,np.pi/20)
\end_layout

\begin_layout Plain Layout

exactVal=calcGQ(x,w)
\end_layout

\begin_layout Plain Layout

print exactVal
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

intvals=[]; errors=[]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for i in range(1,20):
\end_layout

\begin_layout Plain Layout

    x=np.array(range(i))
\end_layout

\begin_layout Plain Layout

    x=cos(np.pi*(x-0.5)/i)
\end_layout

\begin_layout Plain Layout

    w=np.full(i,np.pi/i)
\end_layout

\begin_layout Plain Layout

    intVal=calcGQ(x,w)
\end_layout

\begin_layout Plain Layout

    print intVal, intVal-exactVal
\end_layout

\begin_layout Plain Layout

    intvals.append(intVal)
\end_layout

\begin_layout Plain Layout

    errors.append(abs(intVal-exactVal))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

plot(range(1,20),errors,'ro')
\end_layout

\begin_layout Plain Layout

plot(range(1,20),errors)
\end_layout

\begin_layout Plain Layout

title("Error v/s N for the Gauss-Chebyshev Quadratures")
\end_layout

\begin_layout Plain Layout

xlabel("Number of points (N)")
\end_layout

\begin_layout Plain Layout

ylabel("Error considering N=20 is exact")
\end_layout

\begin_layout Plain Layout

show()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_2.png

\end_inset


\end_layout

\begin_layout Section
Romberg assignment functions
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
I_{1}=\int_{0}^{1}J_{v}^{2}(ku)udu
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
I_{2}=\int_{0}^{\text{âˆž}}K_{v}^{2}(gu)udu
\]

\end_inset


\end_layout

\begin_layout Standard
where k=2.7 and g=1.2, and 
\begin_inset Formula $\nu$
\end_inset

=3.
\end_layout

\begin_layout Subsection
Define functions for both integrands
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#q3_1
\end_layout

\begin_layout Plain Layout

import scipy.special as sp
\end_layout

\begin_layout Plain Layout

def f1(u):
\end_layout

\begin_layout Plain Layout

    return u*sp.jv(3,2.7*u)**2
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def f2(u):
\end_layout

\begin_layout Plain Layout

    return u*sp.kv(3,1.2*u)**2
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Use quad to evaluate to accuracy of 
\begin_inset Formula $10^{-12}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#q3_2
\end_layout

\begin_layout Plain Layout

int1=integrate.quad(f1,0,1,epsabs=1e-12,epsrel=1e-12)
\end_layout

\begin_layout Plain Layout

print int1
\end_layout

\begin_layout Plain Layout

# num_evals=21, error is order 1e-16
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int2=integrate.quad(f2,1,np.inf,epsabs=1e-12,epsrel=1e-12)
\end_layout

\begin_layout Plain Layout

print int2
\end_layout

\begin_layout Plain Layout

# num_evals=75, error is order 1e-8 initially
\end_layout

\begin_layout Plain Layout

# num_evals=105, error is order 8e-13
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The number of evaluations required for scipy.quad is 21 and 105 respectively.
\end_layout

\begin_layout Subsection
Use Gauss-Legendre & Gauss-Laguerre
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#q3_3
\end_layout

\begin_layout Plain Layout

import gauss_quad as gq
\end_layout

\begin_layout Plain Layout

x,w=gq.gauleg(0,1,10)
\end_layout

\begin_layout Plain Layout

total=0.0
\end_layout

\begin_layout Plain Layout

for i in range(len(x)):
\end_layout

\begin_layout Plain Layout

    total+=f1(x[i])*w[i]
\end_layout

\begin_layout Plain Layout

print total, total-int1[0]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#Gauss-Laguerre for I2
\end_layout

\begin_layout Plain Layout

def newf2(u):
\end_layout

\begin_layout Plain Layout

    return f2(u+1)*np.exp(u)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

x,w=gq.gaulag(120,0.0)
\end_layout

\begin_layout Plain Layout

total=0.0
\end_layout

\begin_layout Plain Layout

for i in range(len(x)):
\end_layout

\begin_layout Plain Layout

    total+=newf2(x[i])*w[i]
\end_layout

\begin_layout Plain Layout

print total, total-int2[0]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gauss-Legendre on 
\begin_inset Formula $I_{1}$
\end_inset

 gives an error of the order of 
\begin_inset Formula $10^{-16}$
\end_inset

 and requires 10 function evaluations (N=10 for the quadrature).
 Similarly, Gauss-Laguerre on 
\begin_inset Formula $I_{2}$
\end_inset

 gives an error of the order of 
\begin_inset Formula $10^{-12}$
\end_inset

 and requires 120 function evaluations (N=120 for the quadrature).
 However, I have used a naive implementation which takes f(u) as 
\begin_inset Formula $f_{1}(u).e^{u}$
\end_inset

 for the whole interval, whereas if the asymptotic behaviour for large x
 is considered, it may be possible to improve.
\begin_inset CommandInset href
LatexCommand href
name " Wikipedia says that this approach may not always be numerically stable."
target "https://en.wikipedia.org/wiki/Gauss%E2%80%93Laguerre_quadrature"

\end_inset


\end_layout

\begin_layout Subsection
Use Romberg for the first integral
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Using Romberg
\end_layout

\begin_layout Plain Layout

import romberg as r
\end_layout

\begin_layout Plain Layout

rombval=r.qromb(f1,0,1,eps=1e-12)
\end_layout

\begin_layout Plain Layout

print rombval, rombval[0]-int1[0]
\end_layout

\begin_layout Plain Layout

#Setting 1e-12 accuracy requires 129 function calls and gives 1e-18 error
\end_layout

\begin_layout Plain Layout

#(0.009969186534269642, -1.0555978304531426e-16, 129)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using closed Romberg on the first function, since the function does not
 have any singularities and the interval is finite, the number of function
 calls is 129, and the error is of the order of 
\begin_inset Formula $10^{-18}$
\end_inset

 relative to the scipy.quad answer (assumed to be exact).
\end_layout

\begin_layout Subsection
Transform the infinite range to a finite range
\end_layout

\begin_layout Standard

The infinite range of the second integration can be transformed using u=tan(w).
\end_layout

\begin_layout Standard

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#Transform using u=tan(w)
\end_layout

\begin_layout Plain Layout

def newf3(w):
\end_layout

\begin_layout Plain Layout

    return np.tan(w)*sp.kv(3,1.2*np.tan(w))**2/(np.cos(w)**2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rombval2=r.qromb(newf3,np.pi/4,np.pi/2,eps=1e-12)
\end_layout

\begin_layout Plain Layout

print rombval2,rombval2[0]-int2[0]
\end_layout

\begin_layout Plain Layout

#Setting 1e-12 accuracy requires 257 function calls and gives 1e-14 error
\end_layout

\begin_layout Plain Layout

#(3.0924507786178475, -1.5258472381249202e-14, 257)
\end_layout

\end_inset


\end_layout

\begin_layout Standard

This gives an error of 
\begin_inset Formula $10^{-14}$
\end_inset

 relative to scipy.quad and requires 257 function calls.
 It is possible to use closed Romberg because the new function is integrated
 over a finite range of the variable w, 
\begin_inset Formula $\left[\frac{\pi}{4},\frac{\pi}{2}\right]$
\end_inset

.
\end_layout

\begin_layout Subsection

Comparison of various methods
\end_layout

\begin_layout Standard

For the first integral, the Gauss-Legendre method has beat scipy.quad by
 nearly 2x, since it requires around half the function evaluations.
 For the second integral, the Gauss-Laguerre method does nearly as well
 as scipy.quad but is slightly worse off.
 This may be because I did not consider the asymptotic nature of the function,
 which would only be manifesting itself for large values of x.
 However, Gaussian quadrature methods require the function to be expressible
 in certain forms, which may not always be possible.
 They require prior knowledge of the function, its singularities, its asymptotic
 behaviour, etc, whereas scipy.quad manages to optimize function calls for
 all sorts of functions, without any additional information.
\end_layout

\end_body
\end_document
