#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
EE5011: Error Analysis and Clenshaw Algorithm
\end_layout

\begin_layout Author
Rohan Rao, EE14B118
\end_layout

\begin_layout Section
Programming Assignment (Summing Series)
\end_layout

\begin_layout Subsection
Aitken's 
\begin_inset Formula $\delta^{2}-process$
\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
I_{n}(x)=J_{n}(jx)=\sum_{k=0}^{\infty}\frac{(-1)^{k}(jx/2)^{n+2k}}{k!(n+k)!}=\left(\frac{jx}{2}\right)^{n}\sum_{k=0}^{\infty}\frac{(x^{2}/4)^{k}}{k!(k+n)!}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def kterm(x,k,n):      
\end_layout

\begin_layout Plain Layout

	...:     return (x**2/4.0)**k/(fact(k)*fact(k+n)) 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def sumn(x,n):  
\end_layout

\begin_layout Plain Layout

     ...:     err=[]                 
\end_layout

\begin_layout Plain Layout

     ...:     s=kterm(x,0,n)*(1j*x/2)**n
\end_layout

\begin_layout Plain Layout

     ...:     for k in range(1,1000):
\end_layout

\begin_layout Plain Layout

     ...:         a=kterm(x,k,n)*(1j*x/2)**n         
\end_layout

\begin_layout Plain Layout

     ...:         err.append(a-kterm(x,k-1,n)*(1j*x/2)**n)
\end_layout

\begin_layout Plain Layout

     ...:         if abs(err[-1])<1e-15:                               
\end_layout

\begin_layout Plain Layout

     ...:             break     
\end_layout

\begin_layout Plain Layout

     ...:         s+=a                              
\end_layout

\begin_layout Plain Layout

     ...:     return s,k+1,np.array(err)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def calcAxn(x2,x1,x0):
\end_layout

\begin_layout Plain Layout

     ...:     return x2-((x2-x1)**2/((x2-x1)-(x1-x0)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def aitken(x,n): 
\end_layout

\begin_layout Plain Layout

     ...:     ax=[]; psum=[]; err=[]                 
\end_layout

\begin_layout Plain Layout

     ...:     psum.append(part(x,0,n)) 
\end_layout

\begin_layout Plain Layout

     ...:     for k in range(1,100): 
\end_layout

\begin_layout Plain Layout

     ...:         psum.append(psum[-1]+part(x,k,n))
\end_layout

\begin_layout Plain Layout

     ...:         if(len(psum)>=3):                      
\end_layout

\begin_layout Plain Layout

     ...:             ax.append(calcAxn(psum[-1],psum[-2],psum[-3]))
\end_layout

\begin_layout Plain Layout

     ...:         if(len(ax)>2):
\end_layout

\begin_layout Plain Layout

     ...:             err.append(abs(ax[-1]-ax[-2]))
\end_layout

\begin_layout Plain Layout

     ...:             if err[-1]<1e-15: 
\end_layout

\begin_layout Plain Layout

     ...:                 break
\end_layout

\begin_layout Plain Layout

     ...:             
\end_layout

\begin_layout Plain Layout

     ...:     return np.array(err)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, kterm defines the term after the summation symbol in the final formula
 on the RHS.
 This is used directly in the sumn function to evaluate the sum until the
 errror is below a tolerance (chosen at random) to be 
\begin_inset Formula $10^{-15}.$
\end_inset

 The calcAxn function uses the Aitken 
\begin_inset Formula $\delta^{2}$
\end_inset

 method by considering three partial sum terms at a time to obtain an accelerate
d convergence.
 The plot of the convergence of error of the above two methods is as shown
 below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_1.png

\end_inset


\end_layout

\begin_layout Standard
The curve on top is that of the direct summation, whereas the curve below
 it is the result of the Aitken method.
 This graph was evaluated for the value of x=6.1 and n=20.
 This gives a value of 
\begin_inset Formula $3.092897418*10^{-9}$
\end_inset

.
 The value was compared with the one obtained from scipy.special.jn and is
 accurate.
\end_layout

\begin_layout Subsection
Euler's transformation
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\sum_{n=1}^{\infty}(-1)^{n}\frac{x^{n}}{n}=-ln(1+x)
\]

\end_inset


\end_layout

\begin_layout Standard
Euler's transformation is intended to be applied to an alternating series,
 as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\sum_{n=0}^{\infty}(-1)^{n}a_{n}=\sum_{n=0}^{\infty}(-1)^{n}\frac{\varDelta^{n}a_{0}}{2^{n+1}}
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $\varDelta$
\end_inset

 is the forward difference operator:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\varDelta^{n}a_{0}=\sum_{k=0}^{n}(-1)^{k}\left(_{k}^{n}\right)a_{n-k}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def xterm(x,n):       
\end_layout

\begin_layout Plain Layout

     ...:     return (-x)**n/n
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above function returns the n-th term of the series to be summed.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 def neglnx(y):        
\end_layout

\begin_layout Plain Layout

     ...:     s=xterm(y,1);i=2
\end_layout

\begin_layout Plain Layout

     ...:     val=xterm(y,1)
\end_layout

\begin_layout Plain Layout

     ...:     while i<1e10:
\end_layout

\begin_layout Plain Layout

     ...:         if abs(val-xterm(y,i))<1e-15:
\end_layout

\begin_layout Plain Layout

     ...:             break
\end_layout

\begin_layout Plain Layout

     ...:         val=xterm(y,i)
\end_layout

\begin_layout Plain Layout

     ...:         s+=val
\end_layout

\begin_layout Plain Layout

     ...:         i+=1
\end_layout

\begin_layout Plain Layout

     ...:     return s,i
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This function directly sums the series upto a tolerance of 
\begin_inset Formula $10^{-15}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def fwdiff(x,n):
\end_layout

\begin_layout Plain Layout

     ...:     s=0            
\end_layout

\begin_layout Plain Layout

     ...:     for k in range(n):
\end_layout

\begin_layout Plain Layout

     ...:        s+=(-1)**k*an(x,n-k)*scipy.misc.comb(n,k)/2**(n+1)
\end_layout

\begin_layout Plain Layout

     ...:     return s 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is the forward difference function as defined above, but modified to
 exclude k=n, since that would result in a divide-by-zero operation due
 to the nature of 
\begin_inset Formula $a_{n}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def Euler(x):   
\end_layout

\begin_layout Plain Layout

     ...:     s=fwdiff(x,0)/2
\end_layout

\begin_layout Plain Layout

     ...:     val=s             
\end_layout

\begin_layout Plain Layout

     ...:     for i in range(1,100000):                            
\end_layout

\begin_layout Plain Layout

     ...:         val2=(-1)**i*fwdiff(x,i)
\end_layout

\begin_layout Plain Layout

     ...:         if(abs(val2-val)<1e-15):
\end_layout

\begin_layout Plain Layout

     ...:             break
\end_layout

\begin_layout Plain Layout

     ...:         s+=val
\end_layout

\begin_layout Plain Layout

     ...:         val=val2
\end_layout

\begin_layout Plain Layout

     ...:     return s,i+1
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, this function sums the Euler transformed series, as defined above,
 to a tolerance of 
\begin_inset Formula $10^{-15}$
\end_inset

.
 The plots are as shown below:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_2-1.png

\end_inset


\end_layout

\begin_layout Standard
It can be seen that the direct summing method dominates up until x=0.5, after
 which the Euler transformation is significantly better than the direct
 summation method.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename figure_2-2.png

\end_inset


\end_layout

\begin_layout Standard
For x<0, it can be seen that the direct summation method is better than
 the Euler transformation method.
\end_layout

\end_body
\end_document
