#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Minimization in nD
\end_layout

\begin_layout Author
Rohan Rao (EE14B118)
\end_layout

\begin_layout Section
Minimization of 
\begin_inset Quotes eld
\end_inset

nice
\begin_inset Quotes erd
\end_inset

 functions
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f(x,y,z)=1.5-J_{0}\left((x-0.5)^{2}+(0.5x+y-0.5)^{2}+(0.25x+0.5y+z-0.5)^{2}\right)
\]

\end_inset


\end_layout

\begin_layout Standard
The function minima occurs at (0.5, 0.25, 0.25) since 
\begin_inset Formula $J_{0}(x)$
\end_inset

 is maximum when its real argument is zero.
 The initial point is at the origin.
\end_layout

\begin_layout Subsection
Downhill Simplex (Nelder-Mead) algorithm
\end_layout

\begin_layout Standard
SOURCE CODE: https://github.com/fchollet/nelder-mead/
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def nelder_mead(f, x_start,
\end_layout

\begin_layout Plain Layout

                step=0.1, no_improve_thr=10e-6,
\end_layout

\begin_layout Plain Layout

                no_improv_break=10, max_iter=0,
\end_layout

\begin_layout Plain Layout

                alpha=1., gamma=2., rho=-0.5, sigma=0.5):
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

        @param f (function): function to optimize, must return a scalar
 score
\end_layout

\begin_layout Plain Layout

            and operate over a numpy array of the same dimensions as x_start
\end_layout

\begin_layout Plain Layout

        @param x_start (numpy array): initial position
\end_layout

\begin_layout Plain Layout

        @param step (float): look-around radius in initial step
\end_layout

\begin_layout Plain Layout

        @no_improv_thr,  no_improv_break (float, int): break after no_improv_bre
ak iterations with
\end_layout

\begin_layout Plain Layout

            an improvement lower than no_improv_thr
\end_layout

\begin_layout Plain Layout

        @max_iter (int): always break after this number of iterations.
\end_layout

\begin_layout Plain Layout

            Set it to 0 to loop indefinitely.
\end_layout

\begin_layout Plain Layout

        @alpha, gamma, rho, sigma (floats): parameters of the algorithm
\end_layout

\begin_layout Plain Layout

            (see Wikipedia page for reference)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return: tuple (best parameter array, best score)
\end_layout

\begin_layout Plain Layout

    '''
\end_layout

\begin_layout Plain Layout

    global xpos
\end_layout

\begin_layout Plain Layout

    # init
\end_layout

\begin_layout Plain Layout

    dim = len(x_start)
\end_layout

\begin_layout Plain Layout

    prev_best = f(x_start)
\end_layout

\begin_layout Plain Layout

    no_improv = 0
\end_layout

\begin_layout Plain Layout

    res = [[x_start, prev_best]]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for i in range(dim):
\end_layout

\begin_layout Plain Layout

        x = copy.copy(x_start)
\end_layout

\begin_layout Plain Layout

        x[i] = x[i] + step
\end_layout

\begin_layout Plain Layout

        score = f(x)
\end_layout

\begin_layout Plain Layout

        res.append([x, score])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    # simplex iter
\end_layout

\begin_layout Plain Layout

    iters = 0
\end_layout

\begin_layout Plain Layout

    while 1:
\end_layout

\begin_layout Plain Layout

        # order
\end_layout

\begin_layout Plain Layout

        res.sort(key=lambda x: x[1])
\end_layout

\begin_layout Plain Layout

        best = res[0][1]
\end_layout

\begin_layout Plain Layout

        xpos = res[0][0]
\end_layout

\begin_layout Plain Layout

        draw()
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

        # break after max_iter
\end_layout

\begin_layout Plain Layout

        if max_iter and iters >= max_iter:
\end_layout

\begin_layout Plain Layout

            return res[0]
\end_layout

\begin_layout Plain Layout

        iters += 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # break after no_improv_break iterations with no improvement
\end_layout

\begin_layout Plain Layout

        print '...best so far:', best
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if best < prev_best - no_improve_thr:
\end_layout

\begin_layout Plain Layout

            no_improv = 0
\end_layout

\begin_layout Plain Layout

            prev_best = best
\end_layout

\begin_layout Plain Layout

        else:
\end_layout

\begin_layout Plain Layout

            no_improv += 1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if no_improv >= no_improv_break:
\end_layout

\begin_layout Plain Layout

            return res[0]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # centroid
\end_layout

\begin_layout Plain Layout

        x0 = [0.] * dim
\end_layout

\begin_layout Plain Layout

        for tup in res[:-1]:
\end_layout

\begin_layout Plain Layout

            for i, c in enumerate(tup[0]):
\end_layout

\begin_layout Plain Layout

                x0[i] += c / (len(res)-1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # reflection
\end_layout

\begin_layout Plain Layout

        xr = x0 + alpha*(x0 - res[-1][0])
\end_layout

\begin_layout Plain Layout

        rscore = f(xr)
\end_layout

\begin_layout Plain Layout

        if res[0][1] <= rscore < res[-2][1]:
\end_layout

\begin_layout Plain Layout

            del res[-1]
\end_layout

\begin_layout Plain Layout

            res.append([xr, rscore])
\end_layout

\begin_layout Plain Layout

            continue
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # expansion
\end_layout

\begin_layout Plain Layout

        if rscore < res[0][1]:
\end_layout

\begin_layout Plain Layout

            xe = x0 + gamma*(x0 - res[-1][0])
\end_layout

\begin_layout Plain Layout

            escore = f(xe)
\end_layout

\begin_layout Plain Layout

            if escore < rscore:
\end_layout

\begin_layout Plain Layout

                del res[-1]
\end_layout

\begin_layout Plain Layout

                res.append([xe, escore])
\end_layout

\begin_layout Plain Layout

                continue
\end_layout

\begin_layout Plain Layout

            else:
\end_layout

\begin_layout Plain Layout

                del res[-1]
\end_layout

\begin_layout Plain Layout

                res.append([xr, rscore])
\end_layout

\begin_layout Plain Layout

                continue
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # contraction
\end_layout

\begin_layout Plain Layout

        xc = x0 + rho*(x0 - res[-1][0])
\end_layout

\begin_layout Plain Layout

        cscore = f(xc)
\end_layout

\begin_layout Plain Layout

        if cscore < res[-1][1]:
\end_layout

\begin_layout Plain Layout

            del res[-1]
\end_layout

\begin_layout Plain Layout

            res.append([xc, cscore])
\end_layout

\begin_layout Plain Layout

            continue
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        # reduction
\end_layout

\begin_layout Plain Layout

        x1 = res[0][0]
\end_layout

\begin_layout Plain Layout

        nres = []
\end_layout

\begin_layout Plain Layout

        for tup in res:
\end_layout

\begin_layout Plain Layout

            redx = x1 + sigma*(tup[0] - x1)
\end_layout

\begin_layout Plain Layout

            score = f(redx)
\end_layout

\begin_layout Plain Layout

            nres.append([redx, score])
\end_layout

\begin_layout Plain Layout

        res = nres
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function definition and sample output is below:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

def f(x):
\end_layout

\begin_layout Plain Layout

	val=(x[0]-0.5)**2+(0.5*x[0]+x[1]-0.5)**2+(0.25*x[0]+0.5*x[1]+x[2]-0.5)**2
\end_layout

\begin_layout Plain Layout

	return 1.5-jn(0,val)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OUTPUT:
\end_layout

\begin_layout Plain Layout

In [153]: nelder_mead(f,np.array([0.,0.,0.]))
\end_layout

\begin_layout Plain Layout

...best so far: 0.584621234078 1
\end_layout

\begin_layout Plain Layout

...best so far: 0.537307160442 2
\end_layout

\begin_layout Plain Layout

...best so far: 0.537307160442 3
\end_layout

\begin_layout Plain Layout

...best so far: 0.513054706896 4
\end_layout

\begin_layout Plain Layout

...best so far: 0.50040693318 5
\end_layout

\begin_layout Plain Layout

...best so far: 0.50040693318 6
\end_layout

\begin_layout Plain Layout

...best so far: 0.500112477919 7
\end_layout

\begin_layout Plain Layout

...best so far: 0.500112477919 8
\end_layout

\begin_layout Plain Layout

...best so far: 0.500002829454 9
\end_layout

\begin_layout Plain Layout

...best so far: 0.500002829454 10
\end_layout

\begin_layout Plain Layout

...best so far: 0.500002829454 11
\end_layout

\begin_layout Plain Layout

...best so far: 0.500002829454 12
\end_layout

\begin_layout Plain Layout

...best so far: 0.500002829454 13
\end_layout

\begin_layout Plain Layout

...best so far: 0.500002829454 14
\end_layout

\begin_layout Plain Layout

...best so far: 0.500002195289 15
\end_layout

\begin_layout Plain Layout

...best so far: 0.500002195289 16
\end_layout

\begin_layout Plain Layout

...best so far: 0.500000221936 17
\end_layout

\begin_layout Plain Layout

...best so far: 0.500000221936 18
\end_layout

\begin_layout Plain Layout

...best so far: 0.50000004938 19
\end_layout

\begin_layout Plain Layout

Out[153]: [array([ 0.50419441,  0.26780545,  0.23450568]), 0.50000004938029519]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This shows that the method requires 19 iterations to converge to the minimum
 from the origin starting point.
\end_layout

\begin_layout Subsection
Minimizing along coordinate directions
\end_layout

\begin_layout Standard
Minimizing along conjugate directions requires a loop in which the best
 estimate of the minima is updated by moving along x,y,z respectively.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pos=np.array([0,0,0])
\end_layout

\begin_layout Plain Layout

deltax=np.array([1e-4,0,0])
\end_layout

\begin_layout Plain Layout

deltay=np.array([0,1e-4,0])
\end_layout

\begin_layout Plain Layout

deltaz=np.array([0,0,1e-4])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for i in range(1000):      
\end_layout

\begin_layout Plain Layout

     ...:     prev=f(pos)
\end_layout

\begin_layout Plain Layout

     ...:     if f(pos)>f(pos+deltax):
\end_layout

\begin_layout Plain Layout

     ...:         while f(pos)>f(pos+deltax):
\end_layout

\begin_layout Plain Layout

     ...:             pos=pos+deltax
\end_layout

\begin_layout Plain Layout

     ...:     elif(f(pos)>f(pos-deltax)):
\end_layout

\begin_layout Plain Layout

     ...:         while f(pos)>f(pos-deltax):
\end_layout

\begin_layout Plain Layout

     ...:             pos=pos-deltax
\end_layout

\begin_layout Plain Layout

     ...:     if f(pos)>f(pos+deltay):
\end_layout

\begin_layout Plain Layout

     ...:         while f(pos)>f(pos+deltay):
\end_layout

\begin_layout Plain Layout

     ...:             pos=pos+deltay
\end_layout

\begin_layout Plain Layout

     ...:     elif f(pos)>f(pos-deltay):
\end_layout

\begin_layout Plain Layout

     ...:         while f(pos)>f(pos-deltay):
\end_layout

\begin_layout Plain Layout

     ...:             pos=pos-deltay
\end_layout

\begin_layout Plain Layout

     ...:     if f(pos)>f(pos+deltaz):
\end_layout

\begin_layout Plain Layout

     ...:         while f(pos)>f(pos+deltaz):
\end_layout

\begin_layout Plain Layout

     ...:             pos=pos+deltaz
\end_layout

\begin_layout Plain Layout

     ...:     elif f(pos)>f(pos-deltaz):
\end_layout

\begin_layout Plain Layout

     ...:         while f(pos)>f(pos-deltaz):
\end_layout

\begin_layout Plain Layout

     ...:             pos=pos-deltaz
\end_layout

\begin_layout Plain Layout

     ...:     print pos, f(pos)
\end_layout

\begin_layout Plain Layout

     ...:     if abs(prev-f(pos))<1e-10:
\end_layout

\begin_layout Plain Layout

     ...:         break
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

OUTPUT:
\end_layout

\begin_layout Plain Layout

[ 0.6667  0.2666  0.2   ] 0.500356779364
\end_layout

\begin_layout Plain Layout

[ 0.5016  0.2692  0.24  ] 0.500000040514
\end_layout

\begin_layout Plain Layout

[ 0.4928  0.2576  0.248 ] 0.500000001151
\end_layout

\begin_layout Plain Layout

[ 0.4968  0.2524  0.2496] 0.50000000003
\end_layout

\begin_layout Plain Layout

[ 0.4989  0.2507  0.2499] 0.5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Thus, just 5 iterations are required for converging to the minimum in this
 case.
 This may converge to a different minima depending on the starting point.
\end_layout

\end_body
\end_document
